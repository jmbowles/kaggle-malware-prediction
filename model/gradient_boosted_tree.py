from __future__ import print_function
"""

"""
from pyspark.ml import Pipeline
from pyspark.ml.feature import FeatureHasher
from pyspark.ml.classification import GBTClassifier
from pyspark.ml.evaluation import MulticlassClassificationEvaluator

import pyspark.sql.functions as F

pipeline_path = "output/gradient_boosted_pipeline"
pipeline_model_path = "output/gradient_boosted_pipeline_model"

selected_cols = ["Platform", "AvSigVersion", "AVProductStatesIdentifier", "CountryIdentifier", "SMode", "Wdft_RegionIdentifier", "Census_OSVersion", "OsBuildLab", "Census_IsTouchEnabled", "Census_IsPenCapable", "Census_IsSecureBootEnabled"]

print("Selected Features Count: {0}".format(len(selected_cols)))
print("Selected Features: {0}".format(selected_cols))

df = spark.read.load("../datasets/train.csv", format="csv", sep=",", inferSchema="true", header="true")

print("Selected Features without Exclusions Count: {0}".format(len(selected_cols)))

print("Creating Splits")
train, test = df.randomSplit([0.7, 0.3])

print("Building Pipeline")
stages = []
stages.append(FeatureHasher(numFeatures=512, inputCols=selected_cols, outputCol="features", categoricalCols=selected_cols))
stages.append(GBTClassifier(featuresCol="features", labelCol="HasDetections", predictionCol="prediction"))
pipeline = Pipeline(stages=stages)

print("Fitting -> Training Data")
pipeline_model = pipeline.fit(train)

print("Fitting -> Test Data")
predictions = pipeline_model.transform(test)
predictions.select("HasDetections", "MachineIdentifier", "prediction").show(truncate=False)

print("Computing Multiclass Accuracy")
evaluator = MulticlassClassificationEvaluator(labelCol="HasDetections", predictionCol="prediction", metricName="accuracy")
accuracy = evaluator.evaluate(predictions)
print("Test set accuracy = " + str(accuracy))

print("Saving Pipeline")
pipeline.write().overwrite().save(pipeline_path)

print("Saving Pipeline Model")
pipeline_model.write().overwrite().save(pipeline_model_path)

#print("Saving Predictions")
#predictions.write.saveAsTable("one_vs_rest_predictions", format="parquet", mode="overwrite", path="output/tables/one_vs_rest/predictions")




