from __future__ import print_function

import pickle

from pyspark.ml.feature import FeatureHasher
from pyspark.ml.feature import ChiSqSelector, ChiSqSelectorModel

import pyspark.sql.functions as F

selector_path = "output/chi_selector"
model_path = "output/chi_model"
feature_path = "output/features.pkl"

feature_cols = None
selector = None
model = None

try:
	selector = ChiSqSelector.load(selector_path)
	model = ChiSqSelectorModel.load(model_path)

	with open(feature_path, "rb") as f:
		feature_cols = pickle.load(f)
except:
	print("WARN: Output path missing")


if not (selector and model):

	print("Loading and caching data")

	df = spark.read.load("../datasets/train.csv", format="csv", sep=",", inferSchema="true", header="true")
	#df = df.where(df.Platform == "windows7").where(df.AvSigVersion == "1.275.1293.0")
	
	all_columns = df.columns
	label_col = ["HasDetections"]
	meta_cols = ["MachineIdentifier"]
	feature_cols = list(set(all_columns) - set(label_col) - set(meta_cols))
	ordered_cols = list(label_col + meta_cols + feature_cols)

	print("Hashing features")

	hasher = FeatureHasher(numFeatures=len(feature_cols), inputCols=feature_cols, outputCol="features",  categoricalCols=feature_cols)
	df_features = df.sample(fraction=1.0, seed=3)
	df_features.cache()
	df_features = df_features.select(*ordered_cols)
	df_features = hasher.transform(df_features)

	print("Performing model fitting")

	selector = ChiSqSelector(numTopFeatures=10, labelCol="HasDetections", featuresCol="features", outputCol="selectedFeatures")
	model = selector.fit(df_features)
	model_df = model.transform(df_features)
	
	selector.save(selector_path)
	model.save(model_path)

	with open(feature_path, "wb") as f:
		pickle.dump(feature_cols, f)

print("Feature Indices: {0}".format(model.selectedFeatures))
print("Feature Names: {0}".format([feature_cols[i] for i in model.selectedFeatures]))
